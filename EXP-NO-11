1 +
CONFERENCE MANAGEMENT SYSTEM
2 +
AIM:
3 +
4 +
To draw the diagrams [use case, activity, sequence, collaboration, class, component, deployment, package] for Conference management system

5 +
6 +
SOFTWARE REQUIREMENTS SPECIFICATION
7 +
8 +
SL.NO SOFTWARE REQUIREMENTS SPECIFICATION
9 +
1.0 Hardware Requirements
10 +
1.1 Software Requirements
11 +
1.2 Problem Analysis and Project Plan
12 +
1.3 Project description
13 +
1.4 Reference
14 +
15 +
1.0 HARDWARE REQUIREMENTS:
16 +
17 +
Intel Pentium Processor I3/I5
18 +
19 +
1.1 SOFTWARE REQUIREMENTS:
20 +
21 +
Rational rose / Argo UML
22 +
23 +
1.2 PROBLEM ANALYSIS AND PROJECT PLANNING
24 +
25 +
The Conference Management System is an online website in which candidate can submit the paper and register themselves and then attend the conference. The paper will be reviewed. The details of the conference, date and time will be made available to them through the website. After getting the confirmation details the candidate should submit the revised and camera ready paper. Then the registration process will be done.
26 +
27 +
1.3 PROJECT DESCRIPTION:
28 +
29 +
This software is designed to manage the details of the process that will be taken place in the conference in a place. It works along with the organizer, who arranges all these program and central management system, which consists of the all the details of the member who participates in the presentation
30 +
31 +
1.4 REFERENCES:
32 +
IEEE Software Requirement Specification format.
33 +

34 +
USE CASE DIAGRAM:
35 +
This diagram will contain the actors, use cases which are given below
36 +
Actors: Member, Organizer, Central system
37 +
Use case: planning, invite delegates, allocate seats, presenting paper, prize distribution
38 +
CLASS DIAGRAM:
39 +
40 +
This diagram consists of the following classes, attributes and their operations
41 +
42 +
CLASSES ATTRIBUTES OPERATIONS
43 +
Member Name, id Presenting paper()
44 +
Organizer Member details Allocating seats()
45 +
Central management system Member details Updating()
46 +
ACTIVITY DIAGRAM:
47 +
This diagram will have the activities as Start point ,End point, Decision boxes as given
48 +
below:
49 +
Activities: Invite delegates, Allocate seats, Presenting paper, Choose the winner Decision box: Whether it is reserved or not, Whether the presentation is good or not
50 +
SEQUENCE DIAGRAM:
51 +
This diagram consists of the objects, messages and return messages.
52 +
Object: Member, Organiser, Central management system
53 +
COLLABORATION DIAGRAM:
54 +
This diagram contains the objects and actors. This will be obtained by the completion of the sequence diagram and pressing the F5 key.
55 +
COMPONENT DIAGRAM:
56 +
The component diagram is represented by figure dependency and it is a graph of design of figure dependency. The component diagram's main purpose is to show the structural relationships between the components of a systems. It is represented by boxed figure. Dependencies are represented by communication association.
57 +
DEPLOYMENT DIAGRAM:
58 +
A deployment diagram in the unified modeling language serves to model the physical deployment of artifacts on deployment targets. Deployment diagrams show "the allocation of artifacts to nodes according to the Deployments defined between them. It is represented by 3- dimentional box. Dependencies are represented by communication association
59 +
PACKAGE DIAGRAM:
60 +
A package diagram in unified modeling language that depicts the dependencies between the packages that make up a model. A Package Diagram (PD) shows a grouping of elements in the OO model, and is a Cradle extension to UML. PDs can be used to show groups of classes in Class Diagrams (CDs), groups of components or processes in Component Diagrams (CPDs), or groups of processors in Deployment Diagrams (DPDs). There are three types of layer. They are
61 +
o User interface layer
62 +
63 +
o Domain layer
64 +
65 +
o Technical services layer
66 +
PROGRAM CODING:
67 +
MEMBER 1:
68 +
public class member
69 +
{
70 +
public integer name; public integer id;
71 +
public integer proof;
72 +
public void winning prize()
73 +
{
74 +
}
75 +
public void member()
76 +
{
77 +
}
78 +
}
79 +
ORGANIZER:
80 +
public class organizer
81 +
{
82 +
public integer member attributes; public integer function details;
83 +
public void choosing for winner()
84 +
{
85 +
}
86 +
}
87 +

88 +
CENTRAL MANAGEMENT SYSTEM:
89 +
public class central management system
90 +
{
91 +
public integer function details;
92 +
public integer detail of seat allocation; public void storing()
93 +
{
94 +
}
95 +
public void updating details()
96 +
{
97 +
}
98 +
}
99 +
100 +
RESULT:
101 +

102 +
Thus draw the diagrams [use case, activity, sequence, collaboration, class, state chart, component, deployment, package] for Conference management system has been designed, executed and output is verified.
